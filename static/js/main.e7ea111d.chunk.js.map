{"version":3,"sources":["components/TodoApp.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["dbRef","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","collection","doc","TodoApp","didMount","didMountRef","useRef","useEffect","current","useDidMount","useState","task","setTask","tasklist","setTaskList","a","itemToaddId","Math","floor","random","itemToAdd","update","todos","FieldValue","arrayUnion","JSON","parse","e","id","preventDefault","filter","t","taskEvent","console","log","arrayRemove","stringify","element","findIndex","elem","newTaskList","isCompleted","taskListToString","forEach","push","newTask","set","temp","get","data","length","map","item","fetchData","className","type","name","onChange","target","value","handleChange","placeholder","onClick","taskCompleted","deletetask","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oVAcE,IAAMA,ECFYC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,qDACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAGIC,YDTJC,WAAW,SAASC,IAAI,QA2J5BC,MAzJf,WACE,IAAMC,EAZN,WACE,IAAMC,EAAcC,kBAAO,GAK3B,OAHAC,qBAAU,WACRF,EAAYG,SAAU,IACrB,IACIH,EAAYG,QAMNC,GADE,EAEOC,mBAAS,IAFhB,mBAEVC,EAFU,KAEJC,EAFI,OAGeF,mBAAS,IAHxB,mBAGVG,EAHU,KAGAC,EAHA,iDA8BjB,8BAAAC,EAAA,sDACe,KAATJ,IASIK,EAAa,SAAmBC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAE7C,sBACrBC,EAAW,IAAIJ,EAAY,KAFX,YAAsBL,EAAM,KAEjC,wBAKjBtB,EAAMgC,OAAO,CACLC,MAAOhC,IAASU,UAAUuB,WAAWC,WAAWJ,KAMxDN,EAAY,GAAD,mBAAKD,GAAL,CAAeY,KAAKC,MAAMN,OAzBzC,4CA9BiB,kEA4DjB,WAA2BO,EAAGC,GAA9B,eAAAb,EAAA,sDACEY,EAAEE,iBACFf,EAAYD,EAASiB,QAAO,SAACC,GAAD,OAAOA,EAAEH,IAAMA,MAarCI,EAAYnB,EAASiB,QAAO,SAACC,GAAD,OAAOA,EAAEH,KAAOA,KAClDK,QAAQC,IAAIF,GAEZ3C,EAAMgC,OAAO,CACTC,MAAOhC,IAASU,UAAUuB,WAAWY,YAAYV,KAAKW,UAAUJ,EAAU,OAnBhF,4CA5DiB,kEAoFjB,WAA+BL,EAAGC,GAAlC,qBAAAb,EAAA,6DACEY,EAAEE,iBAEIQ,EAAUxB,EAASyB,WAAU,SAACC,GAAD,OAAUA,EAAKX,IAAMA,MAGlDY,EANR,YAM0B3B,IAGZwB,GAAZ,2BACKG,EAAYH,IADjB,IAEEI,aAAa,IAGf3B,EAAY0B,GAONE,EAAkB,GACxBF,EAAYG,SAAQ,SAACN,GAAD,OAClBK,EAAiBE,KAAKnB,KAAKW,UAAUC,OAGjCQ,EAAU,CAACvB,MAAM,GAAD,OAAMoB,IA1B9B,UA2BQrD,EAAMyD,IAAID,GA3BlB,6CApFiB,sBAqHjB,OA/GFtC,qBAAU,WAAM,4CACZ,8BAAAQ,EAAA,6DACMgC,EAAO,GADb,SAEmB1D,EAAM2D,MAFzB,QAEQC,EAFR,QAOUA,OAAO3B,MAAM4B,OAAS,GAC9BD,EAAKA,OAAO3B,MAAM6B,KAAI,SAAAC,GAAI,OACtBL,EAAKH,KAAKnB,KAAKC,MAAM0B,OAE3BtC,EAAYiC,GAXZ,4CADY,sBAeT3C,GAfU,WAAD,wBAgBViD,KAEJ,CAACjD,IA8FC,yBAAKkD,UAAU,QACb,2BACEC,KAAK,OACLC,KAAK,OACL5B,GAAG,OACH6B,SAAU,SAAC9B,GAAD,OAjGK,SAACA,GACpBf,EAAQe,EAAE+B,OAAOC,OAgGIC,CAAajC,IAC9BkC,YAAY,qBAEd,4BAAQP,UAAU,UAAUQ,QA9Hf,4CA8Hb,OAGA,6BACCjD,IAAa,GACZ,4BACGA,EAASsC,KAAI,SAACpB,GAAD,OACZ,wBAAIuB,UAAWvB,EAAEU,YAAc,YAAc,YAC1CV,EAAE4B,MACH,4BACEL,UAAU,YACVQ,QAAS,SAACnC,GAAD,OAzIN,6CAyIaoC,CAAcpC,EAAGI,EAAEH,MAFrC,aAOA,4BAAQ0B,UAAU,SAASQ,QAAS,SAACnC,GAAD,OA9I/B,6CA8IsCqC,CAAWrC,EAAGI,EAAEH,MAA3D,eAMJ,OEtJKqC,MATf,WACE,OACE,yBAAKX,UAAU,OACb,0BAAMA,UAAU,SAAhB,aADF,IAC2C,6BACzC,kBAAC,EAAD,QCGcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.e7ea111d.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./todoapp.css\";\r\nimport firebase from \"firebase\";\r\nimport db from \"../firebase\";\r\n\r\n  function useDidMount() {\r\n    const didMountRef = useRef(true);\r\n    \r\n    useEffect(() => {\r\n      didMountRef.current = false;\r\n    }, []);\r\n    return didMountRef.current;\r\n  };\r\n\r\n  const dbRef = db.collection('todos').doc('list');\r\n\r\nfunction TodoApp() {\r\n  const didMount=useDidMount()\r\n  const [task, setTask] = useState(\"\");\r\n  const [tasklist, setTaskList] = useState([]);\r\n\r\n\r\nuseEffect(() => {\r\n    async function fetchData(){\r\n      let temp = []\r\n      const data=await dbRef.get();\r\n      //if the array with the list of tasks is empty,\r\n      // the tasklist array will be empty\r\n      // and we will not have an error trying\r\n      //to map through an empty array.\r\n      if(data.data().todos.length > 0){\r\n      data.data().todos.map(item=>\r\n          temp.push(JSON.parse(item) )\r\n      )}\r\n    setTaskList(temp)\r\n    }\r\n\r\n    if(didMount){\r\n      fetchData()\r\n    }\r\n},[didMount])\r\n\r\n  const handleChange = (e) => {\r\n    setTask(e.target.value);\r\n  };\r\n\r\n  async function AddTask () {\r\n    if (task !== \"\") {\r\n      // every time we add a new task, the previous tasks\r\n      // are added to the database as strings\r\n\r\n      // const taskListToString =[]\r\n      // tasklist.forEach((element)=>\r\n      //   taskListToString.push(JSON.stringify(element))\r\n      // );\r\n\r\n      const itemToaddId= \"\\\"id\\\"\" + \":\\\"\" + Math.floor(Math.random() * 1000) +\"\\\"\"\r\n      const itemToAddValue= \"\\\"value\\\"\" + \":\\\"\" + task +\"\\\"\"\r\n      const itemToAddCompleted = \"\\\"isCompleted\\\"\" + \":false\"\r\n      const itemToAdd= \"{\"+itemToaddId+\",\"+itemToAddValue+\",\"+itemToAddCompleted+\"}\"\r\n\r\n      // const newTask = {todos: [...taskListToString, itemToAdd]}\r\n      // await dbRef.set(newTask)\r\n\r\n      dbRef.update({   \r\n              todos: firebase.firestore.FieldValue.arrayUnion(itemToAdd)\r\n      })\r\n\r\n      // updating the tasks lists locally. We're not fetching\r\n      // the db list again to update the app.\r\n\r\n      setTaskList([...tasklist, JSON.parse(itemToAdd)])\r\n    }\r\n  };\r\n\r\n\r\n  async function deletetask (e, id) {\r\n    e.preventDefault();\r\n    setTaskList(tasklist.filter((t) => t.id != id));\r\n\r\n    // send the new tasklist without the deleted task to the db\r\n\r\n    // const taskListToString =[]\r\n    // const filteredTaskList = tasklist.filter((t) => t.id != id)\r\n    // filteredTaskList.forEach((element)=>\r\n    //   taskListToString.push(JSON.stringify(element))\r\n    // );\r\n\r\n    // const newTaskList = {todos: [...taskListToString]}\r\n    // await dbRef.set(newTaskList)\r\n\r\n    const taskEvent = tasklist.filter((t) => t.id === id)\r\n    console.log(taskEvent)\r\n\r\n    dbRef.update({   \r\n        todos: firebase.firestore.FieldValue.arrayRemove(JSON.stringify(taskEvent[0]))\r\n    })\r\n    \r\n  };\r\n\r\n  async function taskCompleted  (e, id) {\r\n    e.preventDefault();\r\n    //let's find index of element\r\n    const element = tasklist.findIndex((elem) => elem.id == id);\r\n\r\n    //copy array into new variable\r\n    const newTaskList = [...tasklist];\r\n\r\n    //edit our element\r\n    newTaskList[element] = {\r\n      ...newTaskList[element],\r\n      isCompleted: true,\r\n    };\r\n    \r\n    setTaskList(newTaskList);\r\n\r\n    // the above code changed the todo list locally\r\n    // after the change is made, the new lists with\r\n    // the completed tasks is sent to the db asynchronously\r\n    // with the set method\r\n      \r\n    const taskListToString =[]\r\n    newTaskList.forEach((element)=>\r\n      taskListToString.push(JSON.stringify(element))\r\n    );\r\n\r\n    const newTask = {todos: [...taskListToString]}\r\n    await dbRef.set(newTask)\r\n\r\n\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"todo\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"text\"\r\n        id=\"text\"\r\n        onChange={(e) => handleChange(e)}\r\n        placeholder=\"Add task here...\"\r\n      />\r\n      <button className=\"add-btn\" onClick={AddTask}>\r\n        Add\r\n      </button>\r\n      <br />\r\n      {tasklist !== [] ? (\r\n        <ul>\r\n          {tasklist.map((t) => (\r\n            <li className={t.isCompleted ? \"crossText\" : \"listitem\"}>\r\n              {t.value}\r\n              <button\r\n                className=\"completed\"\r\n                onClick={(e) => taskCompleted(e, t.id)}\r\n              >\r\n                Completed\r\n              </button>\r\n\r\n              <button className=\"delete\" onClick={(e) => deletetask(e, t.id)}>\r\n                Delete\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoApp;\r\n","//  // Your web app's Firebase configuration\r\n//   // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n//   var firebaseConfig = {\r\n\r\n//   };\r\n//   // Initialize Firebase\r\n//   firebase.initializeApp(firebaseConfig);\r\n//   firebase.analytics();\r\n\r\nimport firebase from \"firebase\";\r\n\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyAFcMykDdfk4Lbrmf5jTE3eX52FR8Qr3tM\",\r\n    authDomain: \"todoapp-ba1c0.firebaseapp.com\",\r\n    databaseURL: \"https://todoapp-ba1c0-default-rtdb.firebaseio.com/\",\r\n    projectId: \"todoapp-ba1c0\",    \r\n    storageBucket: \"todoapp-ba1c0.appspot.com\",\r\n    messagingSenderId: \"1019299984887\",\r\n    appId: \"1:1019299984887:web:f8dd3f0707cde236b8eaf2\",\r\n    measurementId: \"G-FBH1X7ZJYT\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n// const auth = firebase.auth();\r\n\r\nexport default db;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport TodoApp from \"./components/TodoApp\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <span className=\"title\">Todo List</span> <br />\r\n      <TodoApp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}